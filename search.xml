<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[nextjs-lesson1-1]]></title>
      <url>http://wyh2020.com/2017/04/26/nextjs-lesson1-1/</url>
      <content type="html"><![CDATA[<p><a href="https://learnnextjs.com/basics/getting-started/setup" target="_blank" rel="external">原文地址</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Next.js同时支持Windows、Mac、Linux，只要在你系统上安装Node.js就可以创建Next.js应用。</p>
<p>此外，你还需要一个文本编辑器写代码和一个终端应用程序调用一些命令。</p>
<p>如果你是Windows，尝试用PowerShell。Next.js 在任何命令解析器或终端都能工作，但我们将在本指南中使用的一些UNIX特定命令。我们建议使用PowerShell。通过运行下列命令来开始创建实例项目：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir hello-next</div><div class="line">cd hello-next</div><div class="line">npm init -y</div><div class="line">npm install --save react react-dom next</div><div class="line">mkdir pages</div></pre></td></tr></table></figure>
<p>然后打开 helle-next 根目录下的”package.json”文件 添加如下npm脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;dev&quot;: &quot;next&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在一切都准备好了。运行以下命令，启动开发服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run dev</div></pre></td></tr></table></figure></p>
<p>然后在你的浏览器打开<a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a></p>
<p>你在屏幕上看到的输出是什么？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">✦Error No Page Found</div><div class="line">✓404 - This page could not be found</div><div class="line">✦Hello Next.js</div><div class="line">✦Hello World</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[nextjs-lesson1-0]]></title>
      <url>http://wyh2020.com/2017/04/26/nextjs-lesson1-0/</url>
      <content type="html"><![CDATA[<p><a href="https://learnnextjs.com/basics/getting-started" target="_blank" rel="external">原文地址</a></p>
<p>众所周知，现在创建单页面JavaScript应用程序是非常具有挑战性的。幸运的是，有一些项目可以使构建应用程序简单化快速化。    </p>
<p><a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">Create React App</a> 就是一个很好栗子。</p>
<p>即使如此，在你创建恰当的应用之前还会有一个很高的学习曲线。原因在于你要了解客户端路由、页面布局等。如果用服务端渲染来加快页面加载则会更困难。</p>
<p><strong><em>所以，我们要简单并且可定制</em></strong></p>
<p>想想如何创建PHP应用程序。你创建一些文件，编写PHP代码，然后将它部署。我们不必担心路由多，和应用程序服务器上的默认渲染。</p>
<p><img src="https://cloud.githubusercontent.com/assets/50838/24116055/7076ba9c-0dcb-11e7-93d0-ba8f9ac8f6e4.png" alt=""></p>
<p>这就是我们开发的Next.js。我们使用JavaScript和React，而不是PHP。下表是Next.js带来的一些非常酷的特征：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">提供默认服务器</div><div class="line">代码自动拆分加速页面加载</div><div class="line">简单的客户端路由(基于页面)</div><div class="line">开发环境支持基于webpack热替换(HMR)</div><div class="line">支持express或任何其他node.js http服务器</div><div class="line">Babel和Webpack的配置可定制化</div></pre></td></tr></table></figure></p>
<p>听起来很棒，对吧？<br>让我们试试看。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Next.js同时支持Windows、Mac、Linux，只要在你系统上安装Node.js就可以创建Next.js应用。</p>
<p>此外，你还需要一个文本编辑器写代码和一个终端应用程序调用一些命令。</p>
<p>如果你是Windows，尝试用PowerShell。Next.js 在任何命令解析器或终端都能工作，但我们将在本指南中使用的一些UNIX特定命令。我们建议使用PowerShell。通过运行下列命令来开始创建实例项目：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir hello-next</div><div class="line">cd hello-next</div><div class="line">npm init -y</div><div class="line">npm install --save react react-dom next</div><div class="line">mkdir pages</div></pre></td></tr></table></figure>
<p>然后打开 helle-next 根目录下的”package.json”文件 添加如下npm脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;dev&quot;: &quot;next&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在一切都准备好了。运行以下命令，启动开发服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run dev</div></pre></td></tr></table></figure></p>
<p>然后在你的浏览器打开 <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a></p>
<p>你在屏幕上看到的输出是什么？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">✦Error No Page Found</div><div class="line">✓404 - This page could not be found</div><div class="line">✦Hello Next.js</div><div class="line">✦Hello World</div></pre></td></tr></table></figure>
<h4 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h4><p>你将看到如下404页面：</p>
<p><img src="https://cloud.githubusercontent.com/assets/50838/24114002/ac4786f2-0dc4-11e7-8d84-b6f33c8f9aae.png" alt=""></p>
<h4 id="创建第一个页面"><a href="#创建第一个页面" class="headerlink" title="创建第一个页面"></a>创建第一个页面</h4><p>现在我们来创建我们的第一个页面。<br>创建一个名为”pages/index.js”的文件，并添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const Index = () =&gt; (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;p&gt;Hello Next.js&lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">)</div><div class="line"></div><div class="line">export default Index</div></pre></td></tr></table></figure></p>
<p>现在你重新访问 <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> ，你将看到页面显示”Hello Next.js” 。</p>
<p>在这里，我们从pages/index.js模块输出一个简单的React组件，<br>同样，你可以编写自己的React组件并输出。</p>
<p><strong><em>确保你的React组件默认输出</em></strong></p>
<p>现在尝试在Index页中提示语法错误。这里有一个例子：<br>(我们简单的移除<code>&lt;/p&gt;</code> HTML标签)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const Index = () =&gt; (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;p&gt;Hello Next.js</div><div class="line">  &lt;/div&gt;</div><div class="line">)</div><div class="line"></div><div class="line">export default Index</div></pre></td></tr></table></figure>
<p>重新加载 <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> 将会发现什么？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">✦Nothing happened</div><div class="line">✦There&apos;s an error with page not found</div><div class="line">✓There&apos;s an error showing the syntax error</div><div class="line">✦There&apos;s an error with 500 - Internal Error</div></pre></td></tr></table></figure>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>默认情况下，Next.js将跟踪这样的错误并在浏览器中显示它。这可以帮助您识别错误并快速修复它们。<br>一旦你解决了这个问题，整个页面不需要重新加载就会立即展示。我们这样做，得助于Webpack的<a href="https://webpack.js.org/concepts/hot-module-replacement/" target="_blank" rel="external">hot module replacement</a>功能的帮助，Next.js默认支持。</p>
]]></content>
      
        
        <tags>
            
            <tag> nextjs </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Hexo搭建个人博客之旅]]></title>
      <url>http://wyh2020.com/2016/08/11/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/</url>
      <content type="html"><![CDATA[<p>我相信每个just do it的人都会想拥有自己的博客。<br>早年间玩过jekyll，很湿麻烦，没搭建成功过，囧！！后来发现了<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Hexo</a>这玩意，可以说是一键部署，还不需要服务器数据库之类，只要懂点nodejs，会点MarkDown语法，买个域名就行了.so easy！    </p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h4 id="1、安装node"><a href="#1、安装node" class="headerlink" title="1、安装node"></a>1、安装node</h4><p><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">安装教程</a><br>Mac上安装，执行下面命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g node</div></pre></td></tr></table></figure></p>
<h4 id="2、安装git"><a href="#2、安装git" class="headerlink" title="2、安装git"></a>2、安装git</h4><p><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="external">安装教程</a><br>Mac上自带</p>
<h4 id="3、申请github"><a href="#3、申请github" class="headerlink" title="3、申请github"></a>3、申请github</h4><p>提供<a href="https://github.com/" target="_blank" rel="external">github</a>地址，自行注册就行。</p>
<h4 id="4、安装hexo"><a href="#4、安装hexo" class="headerlink" title="4、安装hexo"></a>4、安装hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g hexo</div></pre></td></tr></table></figure>
<h4 id="5、初始化项目"><a href="#5、初始化项目" class="headerlink" title="5、初始化项目"></a>5、初始化项目</h4><p>先创建你的项目目录，然后cd到该目录下，执行初始化操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure></p>
<h4 id="6、生成静态页面"><a href="#6、生成静态页面" class="headerlink" title="6、生成静态页面"></a>6、生成静态页面</h4><p>在你项目目录下执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate (或 hexo g)</div></pre></td></tr></table></figure></p>
<h4 id="7、本地服务启动"><a href="#7、本地服务启动" class="headerlink" title="7、本地服务启动"></a>7、本地服务启动</h4><p>调试看看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server (或 hexo s)</div></pre></td></tr></table></figure></p>
<p>然后浏览器访问<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 就可以看到效果啦。</p>
<h4 id="8、建立Repository"><a href="#8、建立Repository" class="headerlink" title="8、建立Repository"></a>8、建立Repository</h4><p>前提：建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】.<br>现在我们需要修改_config.yml(该文件就在项目跟目录下)文件，来建立关联，执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim _config.yml</div></pre></td></tr></table></figure></p>
<p>在最下面，改为：（注意： : 后面要有空格;wyh2020改为你的github帐号名）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/wyh2020/wyh2020.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h4 id="9、部署"><a href="#9、部署" class="headerlink" title="9、部署"></a>9、部署</h4><p>先执行下面命令才能进行部署：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>部署命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy (或hexo d)</div></pre></td></tr></table></figure></p>
<p>然后在浏览器中浏览 <a href="http://wyh2020.github.io" target="_blank" rel="external">http://wyh2020.github.io</a> 就OVER了(wyh2020改为你的github帐号名).</p>
<h4 id="10、配置域名"><a href="#10、配置域名" class="headerlink" title="10、配置域名"></a>10、配置域名</h4><p>我申请的是万网(已经被阿里收购了)，一定要实名认证哦. 不然没效果.<br>域名解析配置如图：<br><img src="/uploads/域名解析截图.jpg" alt="域名解析配置"></p>
<h4 id="11、其它"><a href="#11、其它" class="headerlink" title="11、其它"></a>11、其它</h4><p>每次部署的步骤，可按以下三步来进行.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>常用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;postName&quot; #新建文章</div><div class="line">hexo new page &quot;pageName&quot; #新建页面</div><div class="line">hexo generate #生成静态页面至public目录</div><div class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class="line">hexo deploy #将.deploy目录部署到GitHub</div><div class="line">hexo help  # 查看帮助</div><div class="line">hexo version  #查看Hexo的版本</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[将hexo博客同时托管到github和coding]]></title>
      <url>http://wyh2020.com/2016/08/11/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%97%B6%E6%89%98%E7%AE%A1%E5%88%B0github%E5%92%8Ccoding/</url>
      <content type="html"><![CDATA[<h2 id="目的-国内访问coding-国外访问github"><a href="#目的-国内访问coding-国外访问github" class="headerlink" title="目的:国内访问coding,国外访问github"></a>目的:国内访问coding,国外访问github</h2><h3 id="1、-config-yml配置"><a href="#1、-config-yml配置" class="headerlink" title="1、_config.yml配置"></a>1、_config.yml配置</h3><p>见图:<br><img src="/uploads/config配置.jpg" alt="_config.yml配置"></p>
<h3 id="2、coding上创建一个新项目"><a href="#2、coding上创建一个新项目" class="headerlink" title="2、coding上创建一个新项目"></a>2、coding上创建一个新项目</h3><p>这里只提供<a href="https://coding.net" target="_blank" rel="external">官网</a>自行注册就行.</p>
<h3 id="3、生成SSH公钥"><a href="#3、生成SSH公钥" class="headerlink" title="3、生成SSH公钥"></a>3、<a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="external">生成SSH公钥</a></h3><p>这玩意还是很简单的,略.</p>
<h3 id="4、pages服务方式部署"><a href="#4、pages服务方式部署" class="headerlink" title="4、pages服务方式部署"></a>4、pages服务方式部署</h3><p>直接上图:<br><img src="/uploads/CodingPages服务配置.jpg" alt="CodingPages服务配置"></p>
<h3 id="5、域名DNS解析配置"><a href="#5、域名DNS解析配置" class="headerlink" title="5、域名DNS解析配置"></a>5、域名DNS解析配置</h3><p>直接上图:<br><img src="/uploads/域名DNS解析配置.jpg" alt="域名DNS解析配置"></p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> coding </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
